// This file is intentionally left blank in the source.
// It's generated by the build process from the actual service worker source code.
// See public/sw.js for the service worker code.
self.addEventListener('install', (event) => {
  console.log('Service Worker installing.');
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('Service Worker activating.');
});

self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked.');
  event.notification.close();

  const urlToOpen = event.notification.data.url || '/';
  const action = event.action;

  if (action === 'postpone') {
    // In a real app, you'd send a message to the client to handle this
    console.log('Postpone action clicked');
    return;
  }
  
  event.waitUntil(
    clients.matchAll({
      type: 'window',
      includeUncontrolled: true
    }).then((clientList) => {
      // Check if there's already a window open with the target URL
      for (const client of clientList) {
        // Use a more robust check for the URL
        if (client.url.includes(self.location.origin) && 'focus' in client) {
          return client.focus();
        }
      }
      // If no window is open, open a new one
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});

self.addEventListener('push', (event) => {
  const data = event.data.json();
  const title = data.title || 'Activa Ahora';
  const options = {
    body: data.body || 'Es hora de tu pausa activa.',
    icon: data.icon || '/logo192.svg',
    badge: data.badge || '/logo-mono.svg',
    vibrate: [200, 100, 200],
    data: data.data || {},
    actions: data.actions || [],
    silent: false,
  };
  event.waitUntil(self.registration.showNotification(title, options));
});

